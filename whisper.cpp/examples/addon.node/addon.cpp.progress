#include "napi.h"
#include "common.h"
#include "common-sdl.h"
#include "whisper.h"

#include <node_api.h>

// #include <node.h>

#include <cassert>
#include <cstdio>
#include <string>
#include <thread>
#include <vector>
#include <fstream>
#include <chrono>
#include <cmath>
#include <cstdint>

class MyWorker : public Napi::AsyncWorker
{
public:
    MyWorker(Napi::Function &callback, int value, Napi::Function &stopCallback)
        // : Napi::AsyncWorker(callback), value_(value), stopCallback_(stopCallback) {}
        : Napi::AsyncWorker(callback), value_(value), stopCallback_(stopCallback)
    {
    }

    void Execute() override
    {
        // Do some work in a separate thread
        for (int i = 0; i < 10; i++)
        {
            if (stopped_)
            {
                // Stop the worker if the stopCallback was called
                return;
            }
            std::this_thread::sleep_for(std::chrono::seconds(1));
            result_ = value_ * 2;
        }
    }

    void OnOK() override
    {
        // Call the JavaScript callback function with the result
        Napi::HandleScope scope(Env());
        Callback().Call({Env().Undefined(), Napi::Number::New(Env(), result_)});
    }

    void OnError(Napi::Error const &error) override
    {
        // Call the JavaScript callback function with the error
        Napi::HandleScope scope(Env());
        Callback().Call({error.Value()});
    }

    void Stop()
    {
        stopped_ = true;
    }

private:
    int value_;
    int result_;
    Napi::Function stopCallback_;
    bool stopped_ = false;
};

void StopWorker(const Napi::CallbackInfo &info)
{
    Napi::Env env = info.Env();
    MyWorker *worker = static_cast<MyWorker *>(info.Data());
    worker->Stop();
}

Napi::Value MyFunction(const Napi::CallbackInfo &info)
{
    Napi::Env env = info.Env();

    if (info.Length() < 3) //  || !info[1].IsFunction() || !info[2].IsFunction())
    {
        Napi::TypeError::New(env, "Must be 3 args, config, callback with data, function to stop thread").ThrowAsJavaScriptException();
        return env.Null();
    }

    Napi::Function callback = info[1].As<Napi::Function>();
    Napi::Function stopCallback = info[2].As<Napi::Function>();
    int value = info[0].As<Napi::Number>().Int32Value();

    MyWorker *worker = new MyWorker(callback, value, stopCallback);
    Napi::AsyncWorker *async_worker = static_cast<Napi::AsyncWorker *>(worker);
    async_worker->Queue();
    // Napi::ObjectReference *objRef = new Napi::ObjectReference(env, Napi::Persistent(info.This()));
    // async_worker->Queue(objRef, StopWorker);

    return env.Undefined();
}

Napi::Object Init(Napi::Env env, Napi::Object exports)
{
    exports.Set(Napi::String::New(env, "startTask"), Napi::Function::New(env, MyFunction));
    return exports;
}

NODE_API_MODULE(addon, Init)
